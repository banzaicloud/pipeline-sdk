// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package pipeline is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	ProcessEntry
	ProcessEvent
	ProcessEntryResponse
	ProcessEventResponse
*/
package pipeline

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the process.
type ProcessEntry struct {
	Id           string                     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	ParentId     string                     `protobuf:"bytes,2,opt,name=parentId" json:"parentId,omitempty"`
	OrgId        uint32                     `protobuf:"varint,3,opt,name=orgId" json:"orgId,omitempty"`
	Name         string                     `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	ResourceType string                     `protobuf:"bytes,5,opt,name=resourceType" json:"resourceType,omitempty"`
	ResourceId   string                     `protobuf:"bytes,6,opt,name=resourceId" json:"resourceId,omitempty"`
	Status       string                     `protobuf:"bytes,7,opt,name=status" json:"status,omitempty"`
	StartedAt    *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=startedAt" json:"startedAt,omitempty"`
	FinishedAt   *google_protobuf.Timestamp `protobuf:"bytes,9,opt,name=finishedAt" json:"finishedAt,omitempty"`
}

func (m *ProcessEntry) Reset()                    { *m = ProcessEntry{} }
func (m *ProcessEntry) String() string            { return proto.CompactTextString(m) }
func (*ProcessEntry) ProtoMessage()               {}
func (*ProcessEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ProcessEntry) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ProcessEntry) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *ProcessEntry) GetOrgId() uint32 {
	if m != nil {
		return m.OrgId
	}
	return 0
}

func (m *ProcessEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProcessEntry) GetResourceType() string {
	if m != nil {
		return m.ResourceType
	}
	return ""
}

func (m *ProcessEntry) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *ProcessEntry) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ProcessEntry) GetStartedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.StartedAt
	}
	return nil
}

func (m *ProcessEntry) GetFinishedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.FinishedAt
	}
	return nil
}

// The request message containing the event.
type ProcessEvent struct {
	ProcessId string                     `protobuf:"bytes,1,opt,name=processId" json:"processId,omitempty"`
	Name      string                     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Log       string                     `protobuf:"bytes,3,opt,name=log" json:"log,omitempty"`
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *ProcessEvent) Reset()                    { *m = ProcessEvent{} }
func (m *ProcessEvent) String() string            { return proto.CompactTextString(m) }
func (*ProcessEvent) ProtoMessage()               {}
func (*ProcessEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ProcessEvent) GetProcessId() string {
	if m != nil {
		return m.ProcessId
	}
	return ""
}

func (m *ProcessEvent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProcessEvent) GetLog() string {
	if m != nil {
		return m.Log
	}
	return ""
}

func (m *ProcessEvent) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type ProcessEntryResponse struct {
}

func (m *ProcessEntryResponse) Reset()                    { *m = ProcessEntryResponse{} }
func (m *ProcessEntryResponse) String() string            { return proto.CompactTextString(m) }
func (*ProcessEntryResponse) ProtoMessage()               {}
func (*ProcessEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ProcessEventResponse struct {
}

func (m *ProcessEventResponse) Reset()                    { *m = ProcessEventResponse{} }
func (m *ProcessEventResponse) String() string            { return proto.CompactTextString(m) }
func (*ProcessEventResponse) ProtoMessage()               {}
func (*ProcessEventResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*ProcessEntry)(nil), "api.ProcessEntry")
	proto.RegisterType((*ProcessEvent)(nil), "api.ProcessEvent")
	proto.RegisterType((*ProcessEntryResponse)(nil), "api.ProcessEntryResponse")
	proto.RegisterType((*ProcessEventResponse)(nil), "api.ProcessEventResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Process service

type ProcessClient interface {
	// Adds a process entry
	LogProcess(ctx context.Context, in *ProcessEntry, opts ...grpc.CallOption) (*ProcessEntryResponse, error)
	// Adds a process event
	LogEvent(ctx context.Context, in *ProcessEvent, opts ...grpc.CallOption) (*ProcessEventResponse, error)
}

type processClient struct {
	cc *grpc.ClientConn
}

func NewProcessClient(cc *grpc.ClientConn) ProcessClient {
	return &processClient{cc}
}

func (c *processClient) LogProcess(ctx context.Context, in *ProcessEntry, opts ...grpc.CallOption) (*ProcessEntryResponse, error) {
	out := new(ProcessEntryResponse)
	err := grpc.Invoke(ctx, "/api.Process/LogProcess", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processClient) LogEvent(ctx context.Context, in *ProcessEvent, opts ...grpc.CallOption) (*ProcessEventResponse, error) {
	out := new(ProcessEventResponse)
	err := grpc.Invoke(ctx, "/api.Process/LogEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Process service

type ProcessServer interface {
	// Adds a process entry
	LogProcess(context.Context, *ProcessEntry) (*ProcessEntryResponse, error)
	// Adds a process event
	LogEvent(context.Context, *ProcessEvent) (*ProcessEventResponse, error)
}

func RegisterProcessServer(s *grpc.Server, srv ProcessServer) {
	s.RegisterService(&_Process_serviceDesc, srv)
}

func _Process_LogProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessServer).LogProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Process/LogProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessServer).LogProcess(ctx, req.(*ProcessEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Process_LogEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessServer).LogEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Process/LogEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessServer).LogEvent(ctx, req.(*ProcessEvent))
	}
	return interceptor(ctx, in, info, handler)
}

var _Process_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Process",
	HandlerType: (*ProcessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogProcess",
			Handler:    _Process_LogProcess_Handler,
		},
		{
			MethodName: "LogEvent",
			Handler:    _Process_LogEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 374 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x4f, 0x6a, 0xe3, 0x30,
	0x18, 0xc5, 0xb1, 0xf3, 0xd7, 0xdf, 0x64, 0x86, 0x19, 0x11, 0x82, 0xc6, 0x84, 0x4c, 0xf0, 0x2a,
	0x2b, 0x07, 0x32, 0x9b, 0xd0, 0x5d, 0x0b, 0x5d, 0x18, 0xb2, 0x28, 0x26, 0x17, 0x50, 0x6c, 0xc5,
	0x15, 0xd8, 0x92, 0x90, 0xe4, 0x42, 0xba, 0xe9, 0x05, 0x7a, 0x9e, 0x9e, 0xaf, 0x58, 0x8e, 0x1d,
	0xa7, 0x5d, 0x64, 0xa7, 0xf7, 0xd3, 0xfb, 0x84, 0xde, 0x93, 0xc0, 0x23, 0x92, 0x85, 0x52, 0x09,
	0x23, 0x50, 0x8f, 0x48, 0xe6, 0xff, 0xcb, 0x84, 0xc8, 0x72, 0xba, 0xb6, 0xe8, 0x50, 0x1e, 0xd7,
	0x86, 0x15, 0x54, 0x1b, 0x52, 0xc8, 0xda, 0x15, 0x7c, 0xb8, 0x30, 0x79, 0x52, 0x22, 0xa1, 0x5a,
	0x3f, 0x72, 0xa3, 0x4e, 0xe8, 0x17, 0xb8, 0x2c, 0xc5, 0xce, 0xd2, 0x59, 0x79, 0xb1, 0xcb, 0x52,
	0xe4, 0xc3, 0x58, 0x12, 0x45, 0xb9, 0x89, 0x52, 0xec, 0x5a, 0xda, 0x6a, 0x34, 0x85, 0x81, 0x50,
	0x59, 0x94, 0xe2, 0xde, 0xd2, 0x59, 0xfd, 0x8c, 0x6b, 0x81, 0x10, 0xf4, 0x39, 0x29, 0x28, 0xee,
	0x5b, 0xb7, 0x5d, 0xa3, 0x00, 0x26, 0x8a, 0x6a, 0x51, 0xaa, 0x84, 0xee, 0x4f, 0x92, 0xe2, 0x81,
	0xdd, 0xbb, 0x62, 0x68, 0x01, 0xd0, 0xe8, 0x28, 0xc5, 0x43, 0xeb, 0xe8, 0x10, 0x34, 0x83, 0xa1,
	0x36, 0xc4, 0x94, 0x1a, 0x8f, 0xec, 0xde, 0x59, 0xa1, 0x2d, 0x78, 0xda, 0x10, 0x65, 0x68, 0x7a,
	0x6f, 0xf0, 0x78, 0xe9, 0xac, 0x7e, 0x6c, 0xfc, 0xb0, 0xce, 0x1d, 0x36, 0xb9, 0xc3, 0x7d, 0x93,
	0x3b, 0xbe, 0x98, 0xd1, 0x1d, 0xc0, 0x91, 0x71, 0xa6, 0x9f, 0xed, 0xa8, 0x77, 0x73, 0xb4, 0xe3,
	0x0e, 0xde, 0x9d, 0x4b, 0x71, 0x2f, 0x94, 0x1b, 0x34, 0x07, 0x4f, 0xd6, 0x3a, 0x6a, 0xfa, 0xbb,
	0x80, 0xb6, 0x14, 0xb7, 0x53, 0xca, 0x6f, 0xe8, 0xe5, 0x22, 0xb3, 0xe5, 0x79, 0x71, 0xb5, 0xac,
	0xa2, 0xb4, 0x0f, 0x64, 0xfb, 0xbb, 0x11, 0xa5, 0x35, 0x07, 0x33, 0x98, 0x76, 0x9f, 0x31, 0xa6,
	0x5a, 0x0a, 0xae, 0x69, 0x97, 0x57, 0xb7, 0x6c, 0xf8, 0xe6, 0x0d, 0x46, 0x67, 0x5e, 0xb5, 0xb0,
	0x13, 0x59, 0xa3, 0xfe, 0x84, 0xd5, 0x17, 0xea, 0x9e, 0xe5, 0xff, 0xfd, 0x86, 0x9a, 0x63, 0xd0,
	0x16, 0xc6, 0x3b, 0x91, 0xd5, 0x05, 0x5c, 0x4f, 0x56, 0xe8, 0xcb, 0x64, 0xf7, 0x02, 0x0f, 0x0b,
	0x98, 0x27, 0xa2, 0x08, 0x0f, 0x84, 0xbf, 0x12, 0x96, 0xe4, 0xa2, 0x4c, 0x43, 0xc9, 0x24, 0xcd,
	0x19, 0xa7, 0xd5, 0xd0, 0x61, 0x68, 0xf3, 0xfe, 0xff, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x23, 0x09,
	0xd9, 0x7e, 0xd2, 0x02, 0x00, 0x00,
}
